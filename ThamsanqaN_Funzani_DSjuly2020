## Import neccesary packages
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

## Load in your data
train = pd.read_csv('../input/language-identification/train_set.csv')
test = pd.read_csv('../input/language-identification/test_set.csv')
sample = pd.read_csv('../input/language-identification/sample_submission.csv')

## Splitting out the X variable from the target
X = train['text']
y=train['lang_id']

## Turning text into something your model can read
vectorizer = TfidfVectorizer(ngram_range=(1,2), min_df=2)
X_vectorized = vectorizer.fit_transform(X)

##Splitting the training data into a training and test set
X_train,X_test,y_train,y_test = train_test_split(X_vectorized,y,test_size=.3,shuffle=True, random_state=42)

## Training the model and evaluating using the test set
lsvc= LinearSVC()
lsvc.fit(X_train, y_train)
y_pred_lsvc = lsvc.predict(X_test)

## Checking the performance of the model on the test set
f1_score(y_test, y_pred_lsvc, average="macro")

## Getting our test set ready
testx = test['text']
test_vect = vectorizer.transform(testx)

## Making predictions on the test set and adding a sentiment column to our original test df
y_pred = lsvc.predict(test_vect)

## Testing Y pred
test['lang_id'] = y_pred

## View dataframe head
test.head()

## Creating an output csv for submission
test[['index','lang_id']].to_csv('testsubmission.csv', index=False)